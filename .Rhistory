c_prob_1_output_df = tornadoe_data_IL %>%
mutate(total_tornado_count = n()) %>%
group_by(yr,total_tornado_count) %>%
summarize(total_number_of_tornadoes = n()) %>%
mutate(each_year_percentage = 100*total_number_of_tornadoes/total_tornado_count) %>%
select(-total_tornado_count) %>%
rename(year = yr)
c_prob_2_output_df = tornadoe_data_IL %>%
mutate(total_tornado_count = n()) %>%
group_by(mo,total_tornado_count) %>%
summarize(total_number_of_tornadoes = n()) %>%
mutate(each_year_percentage = 100*total_number_of_tornadoes/total_tornado_count) %>%
select(-total_tornado_count) %>%
rename(Month = mo)
each_hr_totnadoe_freq_percent_df = tornadoe_data_IL %>%
mutate(hour = as.numeric(substr(time,start = 1,stop = 2)),
total_tornado_count = n()) %>%
group_by(hour, total_tornado_count) %>%
summarize(each_hour_total = n()) %>%
mutate(each_hour_percentage = 100*each_hour_total/total_tornado_count,
hour_next = hour + 1,
hour_text = sprintf("%02d",hour),
hour_next_text = sprintf("%02d", hour_next),
Format_24_Hour = paste0(hour_text,":00-",hour_next_text,":00"),
hour_text12 = sprintf("%02d",hour%%12),
hour_next_text12 = sprintf("%02d",hour_next%%12),
Format_12_Hour = paste0(hour_text12,":00-",hour_next_text12,":00 ", ifelse(hour_next<12|hour_next==24, "AM","PM"))) %>%
ungroup() %>%
select(Format_24_Hour, Format_12_Hour, each_hour_total, each_hour_percentage)
c_prob_4_output_df =  tornadoe_data_IL %>%
mutate(total_tornado_count = n()) %>%
group_by(Distance = mag,total_tornado_count) %>%
summarize(Tornadoe_Total = n()) %>%
mutate(Tornadoe_Percentage = 100*Tornadoe_Total/total_tornado_count) %>%
select(Distance, Tornadoe_Total, Tornadoe_Percentage)
total_injuries_fatalities_loss_for_each_year_df = tornadoe_data_IL %>%
group_by(Year = yr) %>%
summarise(Total_Injuries = sum(inj, na.rm = T),
Total_Fatalities = sum(fat, na.rm = T),
Total_Loss = sum(loss, na.rm =T))
total_injuries_fatalities_loss_for_per_month_df = tornadoe_data_IL %>%
group_by(Month = mo) %>%
summarise(Total_Injuries = sum(inj, na.rm = T),
Total_Fatalities = sum(fat, na.rm = T),
Total_Loss = sum(loss, na.rm =T))
total_injuries_fatalities_loss_for_each_hr_df  = tornadoe_data_IL %>%
mutate(hour = as.numeric(substr(time,start = 1,stop = 2))) %>%
group_by(hour) %>%
summarise(Total_Injuries = sum(inj, na.rm = T),
Total_Fatalities = sum(fat, na.rm = T),
Total_Loss = sum(loss, na.rm =T)) %>%
mutate(hour_next = hour + 1,
hour_text = sprintf("%02d",hour),
hour_next_text = sprintf("%02d", hour_next),
Format_24_Hour = paste0(hour_text,":00-",hour_next_text,":00"),
hour_text12 = sprintf("%02d",hour%%12),
hour_next_text12 = sprintf("%02d",hour_next%%12),
Format_12_Hour = paste0(hour_text12,":00-",hour_next_text12,":00 ", ifelse(hour_next<12|hour_next==24, "AM","PM"))) %>%
select(starts_with("Format",ignore.case = FALSE),starts_with("Total", ignore.case = FALSE))
tornadoe_state_freq_df_arranged = tornadoe_data_IL %>%
merge(County_IL_data %>%
select(County = `County Name`, f1 = `FIPS County`) %>%
mutate(f1 = as.numeric(f1)),
by = "f1") %>%
group_by(County) %>%
summarize(Total_hit_by_Tornadoe = n())
c_prob_8_lat_long_df = County_IL_data %>%
merge(County_coordinates %>%
select(County, lat, lon = lng),
by.x = "County Name", by.y = "County")
c_prob_8_lat_long_df$popup_var = paste0( 'County:', c_prob_8_lat_long_df$`County Name`, 'State:', c_prob_8_lat_long_df$State )
output_dataframes = list( "c_prob_1_output_df" = c_prob_1_output_df, "c_prob_2_output_df" = c_prob_2_output_df,
"c_prob_3_output_df" = each_hr_totnadoe_freq_percent_df, "c_prob_4_output_df" = c_prob_4_output_df, "c_prob_5_output_df" = total_injuries_fatalities_loss_for_each_year_df,
"c_prob_6_output_df" = total_injuries_fatalities_loss_for_per_month_df, "c_prob_7_output_df" = total_injuries_fatalities_loss_for_each_hr_df,
"c_prob_8_output_df" = tornadoe_state_freq_df_arranged, "c_prob_9_output_df" = c_prob_8_lat_long_df )
output_dataframes
shiny::runApp()
suppressWarnings( library( scales ) )
runApp()
runApp()
runApp()
runApp()
runApp()
all_magnitude = unique( tornadoe_data$mag )
selected_magnitude = "Loss"
states = unique( tornadoe_data[ which( tornadoe_data$mag == selected_magnitude ), "st" ] )
states
selected_magnitude =  unique( tornadoe_data$yr )
selected_magnitude
states = unique( tornadoe_data[ which( tornadoe_data$mag == selected_magnitude ), "st" ] )
states
all_magnitude
selected_magnitude =  3
states = unique( tornadoe_data[ which( tornadoe_data$mag == selected_magnitude ), "st" ] )
states
mag_city_state_df = data.frame( state = states, country = rep( "U.S.", length( states ) ) )
paste( mag_city_state_df$country, mag_city_state_df$state )
tornadoe_data
unique(tornadoe_data$st)
length(unique(tornadoe_data$st))
paste( mag_city_state_df$country, mag_city_state_df$state )
a = paste( mag_city_state_df$country, mag_city_state_df$state )
paste( city_state_df$country, city_state_df$state )
city_state_df = data.frame( state = states, country = rep( "U.S.", length( states ) ) )
city_state_df
city_state_df = data.frame( state = states, country = "U.S." ) )
city_state_df = data.frame( state = states, country = "U.S." )
city_state_df
a
library(googleway)
key <- "AIzaSyBAyyKWvZhj9HUNNX0vfIiuRfrJMkIyFyE"
google_geocode(address = "Paris", key = key)
a
info1 = sapply(a,function(x) {message(x); google_geocode(address = x, key = key)$results$geometry$location})
info1
t(info1)
info2 = sapply(c("U.S. SC","U.S. MI"),function(x) {message(x); google_geocode(address = x, key = key)$results$geometry$location})
info2
info2 = sapply(c("U.S. SC","U.S. MI"),function(x) {message(x); google_geocode(address = x, key = key)$results$geometry$location})
info2
t(info1)
info1 = t(info1)
write.csv(info1, "US_state_coordinates.csv")
State_coordinates = fread("County_Coordinates_IL.csv")
State_coordinates
State_coordinates = fread("US_state_coordinates.csv")
State_coordinates
State_coordinates[,State := gsub("U.S. ","",CountryState)]
selected_magnitude =  3
states = unique( tornadoe_data[ which( tornadoe_data$mag == selected_magnitude ), "st" ] )
mag_city_state_df = data.frame( state = states, country = rep( "U.S.", length( states ) ) )
mag_city_state_df
mag_lat_long_df = cbind( mag_city_state_df[1:3], geocode( paste( mag_city_state_df$country, mag_city_state_df$state )[1:3] ) )
mag_lat_long_df = cbind( mag_city_state_df[1:3,], geocode( paste( mag_city_state_df$country, mag_city_state_df$state )[1:3] ) )
mag_lat_long_df
State_coordinates
mag_lat_long_df = merge(mag_city_state_df, State_coordinates[,.(lat,lon = lng, state=State)], by = "state",all.x = TRUE)
mag_lat_long_df
city_state_df = data.frame( state = states, country = "U.S." )
lat_long_df = cbind( city_state_df[1:3,], geocode( paste( city_state_df$country, city_state_df$state )[1:3] ) )
lat_long_df
lat_long_df = merge(city_state_df, State_coordinates[,.(lon = lng, lat, state=State)], by = "state",all.x = TRUE)
lat_long_df
runApp()
runApp()
tornadoe_data_IL_A_0 = tornadoe_data[ which( tornadoe_data$st == "IL" ), ]
tornadoe_data_IL_A_0
tornadoe_data_IL_A = tornadoe_data_IL_A_0
all_county_1 = unique( tornadoe_data_IL_A$f1 )
all_county_names = unlist( lapply( all_county_1, function( curr_county ){
County = County_IL_data[ which( as.numeric(County_IL_data$`FIPS County`) == curr_county ), "County Name" ]
#if( length( County ) != 0 ){ County = County } else{ County = "Not Found" }
return( County )
} ) )
County
tornadoe_data = data.table(tornadoe_data)
County_IL_data = data.table(County_IL_data)
County_code_data = data.table(County_code_data)
tornadoe_data_IL_A_0 = tornadoe_data[ st == "IL" ]
all_selected_state_data =
all_county_1 = unique( tornadoe_data_IL_A_0$f1 )
all_county_names = County_IL_data[`FIPS County` %in% all_county_1,`County Name`]
tornadoe_data = data.frame(tornadoe_data)
County_IL_data = data.frame(County_IL_data)
County_code_data = data.frame(County_code_data)
A_prob_1_df = lapply( all_county_names, function( county_name ){
selected_county_code = County_IL_data[ which( County_IL_data$`County Name` == county_name ), "FIPS County" ]
current_county_data = tornadoe_data_IL_A[ which( tornadoe_data_IL_A$f1 == selected_county_code ), c( "date", "time", "st", "inj",                                                           "fat", "loss", "mag" ) ]
county_inj = unique( current_county_data$inj ); county_inj_text = paste0( county_inj, collapse = "," )
county_fat = unique( current_county_data$fat ); county_fat_text = paste0( county_fat, collapse = "," )
county_loss = unique( current_county_data$loss ); county_loss_text = paste0( county_loss, collapse = "," )
county_mag = unique( current_county_data$mag ); county_mag_text = paste0( county_mag, collapse = "," )
require_df = data_frame( County = county_name, State = "IL", Injuries = county_inj_text, Fatalities = county_fat_text, Loss = county_loss_text )
return( require_df )
} )
A_prob_1_leaflet_df = bind_rows( A_prob_1_df )
A_prob_1_lat_long_df = cbind( A_prob_1_leaflet_df[1:3,], geocode( paste( A_prob_1_leaflet_df$County[1:3], A_prob_1_leaflet_df$State[1:3] ) ) )
A_prob_1_lat_long_df
County_coordinates
A_prob_1_lat_long_df
County_coordinates
A_prob_1_lat_long_df
runApp()
all_county_1 = unique( tornadoe_data_IL_A$f1 )
all_county_names = unlist( lapply( all_county_1, function( curr_county ){
County = County_IL_data[ which( as.numeric(County_IL_data$`FIPS County`) == curr_county ), "County Name" ]
#if( length( County ) != 0 ){ County = County } else{ County = "Not Found" }
return( County )
} ) )
all_selected_state_data
tornadoe_data_IL_A_0 = tornadoe_data[ st == "IL" ]
all_selected_state_data =
all_county_1 = unique( tornadoe_data_IL_A_0$f1 )
all_selected_state_data
leaflet( data = all_selected_state_data ) %>% addTiles() %>% addMarkers(~lon, ~lat, popup = ~as.character(popup_var), label = ~as.character(popup_var) ) %>% addProviderTiles( A_background_type )
runApp()
install.packages(c("discretization", "infotheo"))
library(discretization)
library(infotheo)
data1<-read.table(file.choose())
no_of_row=length(data1[,2])
no_of_col=length(data1[1,])
ankur<-array(0,dim = c(no_of_row,no_of_col))
for (i in 1:no_of_row)
{
for (j in 1:no_of_col)
{
min<-apply(data1,2,min)
max<-apply(data1,2,max)
cat(max)
mid <-min+(max-min)/2
if(data1[i,j] <= mid)
ankur[i,j]=0
if(data1[i,j] > mid)
ankur[i,j]=1
}
}
no_of_row
no_of_col
ankur
class(array)
class(ankur)
data1
for (i in 1:no_of_row){
for (j in 1:no_of_col)
{
min<-apply(data1,2,min)
max<-apply(data1,2,max)
cat(max)
mid <-min+(max-min)/2
if(data1[i,j] <= mid){
ankur[i,j]=0}
if(data1[i,j] > mid){
ankur[i,j]=1}
}
}
for (i in 1:no_of_row){
for (j in 1:no_of_col)
{
min<-min(data1[,j])
max<-max(data1[,j])
cat(max)
mid <-min+(max-min)/2
if(data1[i,j] <= mid){
ankur[i,j]=0}
if(data1[i,j] > mid){
ankur[i,j]=1}
}
}
str(data1)
data1<-read.table(file.choose())
str(data1)
data1 = sapply(data1, function(x) as.numeric(x))
head(data1)
data1<-read.table(file.choose())
head(data1)
data1<-read.table(file.choose(),header = TRUE)
head(data1)
no_of_row=length(data1[,2])
no_of_col=length(data1[1,])
ankur<-array(0,dim = c(no_of_row,no_of_col))
for (i in 1:no_of_row){
for (j in 1:no_of_col)
{
min<-min(data1[,j])
max<-max(data1[,j])
cat(max)
mid <-min+(max-min)/2
if(data1[i,j] <= mid){
ankur[i,j]=0}
if(data1[i,j] > mid){
ankur[i,j]=1}
}
}
head(ankur)
head(ankur)
ankur<-array(0,dim = c(no_of_row,no_of_col))
for (i in 1:no_of_row){
for (j in 1:no_of_col)
{
min<-min(data1[,j])
max<-max(data1[,j])
message(max)
mid <-min+(max-min)/2
ankur[i,j]= ifelse(data1[i,j] <= mid,0,1)
}
}
head(ankur)
selected_background = "NatGeoWorldMap"
A_background_type = switch( selected_background,
"NatGeoWorldMap" = "Esri.NatGeoWorldMap",
"WorldImagery" = "Esri.WorldImagery",
"OceanBasemap" = "Esri.OceanBasemap",
"WorldPhysical" = "Esri.WorldPhysical",
"WorldStreetMap" = "Esri.WorldStreetMap"
)
A_background_type
tornadoe_data_IL_A = tornadoe_data_IL_A_0
all_county_1 = unique( tornadoe_data_IL_A$f1 )
all_county_names = unlist( lapply( all_county_1, function( curr_county ){
County = County_IL_data[ which( as.numeric(County_IL_data$`FIPS County`) == curr_county ), "County Name" ]
#if( length( County ) != 0 ){ County = County } else{ County = "Not Found" }
return( County )
} ) )
County
all_county_names
require_df
tornadoe_data = data.table(tornadoe_data)
County_IL_data = data.table(County_IL_data)
County_code_data = data.table(County_code_data)
tornadoe_data_IL_A_0 = tornadoe_data[ st == "IL" ]
all_selected_state_data =
all_county_1 = unique( tornadoe_data_IL_A_0$f1 )
all_county_names = County_IL_data[`FIPS County` %in% all_county_1,`County Name`]
tornadoe_data = data.frame(tornadoe_data)
County_IL_data = data.frame(County_IL_data)
County_code_data = data.frame(County_code_data)
A_prob_1_df = lapply( all_county_names, function( county_name ){
selected_county_code = County_IL_data[ which( County_IL_data$`County Name` == county_name ), "FIPS County" ]
current_county_data = tornadoe_data_IL_A[ which( tornadoe_data_IL_A$f1 == selected_county_code ), c( "date", "time", "st", "inj",                                                           "fat", "loss", "mag" ) ]
county_inj = unique( current_county_data$inj ); county_inj_text = paste0( county_inj, collapse = "," )
county_fat = unique( current_county_data$fat ); county_fat_text = paste0( county_fat, collapse = "," )
county_loss = unique( current_county_data$loss ); county_loss_text = paste0( county_loss, collapse = "," )
county_mag = unique( current_county_data$mag ); county_mag_text = paste0( county_mag, collapse = "," )
require_df = data_frame( County = county_name, State = "IL", Injuries = county_inj_text, Fatalities = county_fat_text, Loss = county_loss_text )
return( require_df )
} )
A_prob_1_leaflet_df = bind_rows( A_prob_1_df )
A_prob_1_lat_long_df = merge(A_prob_1_leaflet_df, County_coordinates[,.(County, lon = lng, lat)], by = "County", all.x = T)
A_prob_1_lat_long_df$popup_var = paste0( 'County:', A_prob_1_lat_long_df$County,"::","Injuries:",A_prob_1_lat_long_df$Injuries,
"Fatalities:",A_prob_1_lat_long_df$Fatalities, "Loss:",A_prob_1_lat_long_df$Loss  )
head(A_prob_1_lat_long_df)
A_background_type
leaflet( data = A_prob_1_lat_long_df ) %>% addTiles() %>% addMarkers(~lon, ~lat, popup = ~as.character(popup_var), label = ~as.character(popup_var) ) %>% addProviderTiles( A_background_type )
runApp()
State_coordinates
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ui = navbarPage(
theme = shinytheme("superhero"),
# theme = 'bootstrap_slate.css',     #.... Theme
# useShinyjs(),
# actionButton("hideshow", "Hide/show plot"),
title = 'Project-3',
#..... Include ui for each tab .....
source( file.path( "ui", "ui_c.R" ), local = T )$value,
source( file.path( "ui", "ui_b.R" ), local = T )$value,
source( file.path( "ui", "ui_a.R" ), local = T )$value,
)
runApp()
runApp()
runApp()
runApp()
tabPanel(
strong( 'About' ),
fluidRow(tabName = "info",
h1("Aeroplane Visualization"),
h2("Authors: "),
h2("Project 2 for CS 424 Spring 2018 UIC"),
h4("If graphs are 'glitchy' resize your window."),
h4("Libraries used:"),
h4("shinydashboard"),
h4("ggplot2"),
h4("lubridate"),
h4("DT"),
h4("jpeg"),
h4("grid"),
h4("leaflet"),
h4("reshape2"),
h4("scales"),
h4("dplyr"),
h4("plotly"),
h4("shinyWidgets"),
h4("shinycssloaders")
)
)
runApp()
View(State_coordinates)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# br(),
#
# fluidRow(
#   conditionalPanel(
#     condition = "input.show_graphs == true",
#
#   column( 12, plotlyOutput( "Injuries_Fatalities_Loss_Month_Barplot" ) )
#   )
# ),
#
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
save.image()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabPanel(
strong( 'About' ),
fluidRow(tabName = "info",
h4("Project 3 - You Spin Me Round"),
h4("Authors: Aditya Sinha, Margi Katwala and Vignan Thmmu"),
h4("Libraries used: Shiny, Ggplot2, Ggthemes, Scales, Dplyr,Plotly, Data.table,Ggmap,Leaflet,DT,Shinythemes & Shinyjs")
),
br(),
fluidRow(tabName = "Explore Finding the Unknown",
strong("Explore our first tab: Find the Unknown",align = "center"),
em("This tab will explore different aspects of torndo over past 65 years in state of Illinois", style = "font-family: 'Source Sans Pro';",style = "color:blue"),
h4("The first three graph represents the total of tornado by year, month and lastly by per hour"),
h4("The first three graph represents the total of tornado by year, month and lastly by per hour")
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
